# Imports
from bago import bagoMain
import numpy as np
The first step is to set parameters for the BAGO algorithm in next cell.

We also provide a template for the parameters in bago package. To view the template, run the following command:

from bago import bagoMain
    print(parametersTemplate)
# Set the parameters
parameters = {

    # Time points of the gradient (in minutes)
    'timePoints': np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=float),

    # A value specifying if the gradient can be changed at the second time point. 
    # Set it to False if the gradient is fixed at the second time point to load the sample.
    'isChangable': False,

    # Range of strong mobile phase percentage (in %)
    'gradRange': (5.0, 95.0),

    # Step size of strong mobile phase percentage (in %)
    'gradStep': 5,

    # Range of total strong mobile phase being used (in percentage)
    'mpBound': (35.0, 50.0),

    # A dictionary of the gradient settings. Make sure the initial gradient setting is named starting with "Init_" (e.g. Init_1).
    'grads': {
        'Init_1': np.array([5, 5, 25, 35, 45, 55, 65, 75, 85, 95], dtype=float),
    },

    # Directory of the raw data. The new raw data should be loaded in this directory.
    'rawDatadir': "RawData",

    # Directory of the gradient method. The new gradient method will be saved in this directory.
    'methodDir': "GradientMethod",

    # Number of top signals used to calculate the separation efficiency.
    'sNum': 500,

    # Retention time tolerance (in minutes)
    'rtTol': 1.0,

    # Intensity tolerance (in arbitrary units)
    'intTol': 1000,

    # Precursor m/z tolerance (in m/z)
    'precsMzTol': 0.01,

    # Product m/z tolerance (in m/z)
    'prodMzTol': 0.02,

    # Acquisition function used to calculate the next gradient setting
    'acqFunc': 'ei',

    # DO NOT CHANGE THE FOLLOWING PARAMETERS
    'gradPoints': None, # Valid strong mobile phase percetanges calculated from gradRange and gradStep
    'gradIdx': 0, # Index of the current gradient setting generated by BAGO
    'sepEffs': None, # Separation efficiencies of the gradient settings calculated by BAGO
    'rtRange': None, # Retention time range (in minutes) of the gradient (e.g. (0, 10)) calculated by BAGO
}

# Create a dictionary to store the LC-MS data
exp = {}
# Initilization
mainModel = bagoMain.modelInitilization(parameters=parameters, exp=exp)
# Calculate the next gradient by taking new MS data
# Run this block whenever you have a new MS data
bagoMain.getNextGradient(exp=exp, parameters=parameters, mainModel=mainModel)
# Finish optimization and generate results
bagoMain.runEvaluation(exp=exp, parameters=parameters)
# Save parameters  
# Run this block whenever you want to save the current parameters
bagoMain.saveParameters(parameters=parameters)
